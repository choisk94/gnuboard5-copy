-- 관리자계정에서 아래와 같이 계정 및 계정권한 부여해주세요
--CREATE USER PETNOLJA IDENTIFIED BY PETNOLJA;
--GRANT CONNECT, RESOURCE TO PETNOLJA;
--GRANT CREATE VIEW TO PETNOLJA;
--이거 다 하고 나서 각 테이블 오른쪽 키 - 데이터임포트로 엑셀파일 불러오기

DROP TABLE FAVORITE;
DROP TABLE REVIEW;
DROP TABLE ACCOUNT;
DROP TABLE LOG;
DROP TABLE ATTACHMENT;
DROP TABLE NOTICE;
DROP TABLE ABLE_DATE;
DROP TABLE REPORT;
DROP TABLE RESERV_PET;
DROP TABLE RESERV_SITTING;
DROP TABLE FEE;
DROP TABLE RESERV;
DROP TABLE QNA;
DROP TABLE ADMIN;
DROP TABLE SITTER;
DROP TABLE PET;
DROP TABLE MEMBER;
DROP SEQUENCE SEQ_ANO;
DROP SEQUENCE SEQ_CNO;
DROP SEQUENCE SEQ_MNO;
DROP SEQUENCE SEQ_NNO;
DROP SEQUENCE SEQ_PNO;
DROP SEQUENCE SEQ_QNO;
DROP SEQUENCE SEQ_RPNO;
DROP SEQUENCE SEQ_REVNO;
DROP SEQUENCE SEQ_RESNO;
DROP FUNCTION GET_DISTANCE;

CREATE TABLE MEMBER (
	MEM_NO	NUMBER		NOT NULL,
	MEM_ID	VARCHAR2(20)		NOT NULL,
	MEM_NAME	VARCHAR2(15)		NOT NULL,
	MEM_PWD	VARCHAR2(16)		NOT NULL,
	MEM_TEL	VARCHAR2(20)		NOT NULL,
	MEM_EMAIL	VARCHAR2(30)		NOT NULL,
	MEM_ADDRESS	VARCHAR2(200)		NOT NULL,
	MEM_DETAIL_ADDRESS	VARCHAR2(200)		NOT NULL,
	MEM_LATITUDE	NUMBER		NOT NULL,
	MEM_LONGTITUDE	NUMBER		NOT NULL,
	MEM_ENROLLDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	MEM_STATUS	CHAR(1)	DEFAULT 'Y'	NOT NULL,
	MEM_DEL_DATE	DATE		NULL,
	MEM_DEL_DETAIL	VARCHAR2(1000)		NULL,
	MEM_ADS	CHAR(1)	DEFAULT 'N'	NULL,
	MEM_BLOCK	CHAR(1)	DEFAULT 'N'	NOT NULL,
	MEM_REPORT	NUMBER	DEFAULT 0	NOT NULL
);

COMMENT ON COLUMN MEMBER.MEM_NO IS 'SEQ_MNO';

COMMENT ON COLUMN MEMBER.MEM_ADDRESS IS '도로명주소';

COMMENT ON COLUMN MEMBER.MEM_DETAIL_ADDRESS IS '상세주소';

COMMENT ON COLUMN MEMBER.MEM_LATITUDE IS 'XX.XXXXX';

COMMENT ON COLUMN MEMBER.MEM_LONGTITUDE IS 'XX.XXXXX';

COMMENT ON COLUMN MEMBER.MEM_STATUS IS '탈퇴하면N';
ALTER TABLE member ADD MEM_MEMO VARCHAR2(100);

CREATE TABLE PET (
	PET_NO	NUMBER		NOT NULL,
	MEM_NO	NUMBER		NOT NULL,
	PET_NAME	VARCHAR2(50)		NOT NULL,
	PET_BIRTH	CHAR(7)		NOT NULL,
	PET_WEIGHT	NUMBER		NOT NULL,
	PET_GENDER	CHAR(1)		NOT NULL,
	PET_SIZE	CHAR(9)		NOT NULL,
	PET_BREED	VARCHAR2(50)		NOT NULL,
	PET_STATUS	CHAR(1)	DEFAULT 'Y'	NOT NULL,
	PET_ENROLLDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	PET_IMG	VARCHAR2(1000)		NOT NULL,
	VACCINE	VARCHAR2(200)		NULL,
	CAUTION	VARCHAR2(200)		NULL,
	NOTE	VARCHAR2(4000)		NULL,
	HOSPI	VARCHAR2(100)		NOT NULL,
	HOSPI_TEL	VARCHAR2(20)		NOT NULL,
	NEUTERED	CHAR(1)		NOT NULL,
	CHIP	VARCHAR2(15)		NOT NULL
);

COMMENT ON COLUMN PET.PET_NO IS 'SEQ_PNO';

COMMENT ON COLUMN PET.MEM_NO IS 'SEQ_MNO';

COMMENT ON COLUMN PET.PET_BIRTH IS 'YYYY-MM형태';

COMMENT ON COLUMN PET.PET_STATUS IS '삭제하면N';

COMMENT ON COLUMN PET.PET_IMG IS 'resources/xxx/xxxxx.jpg';


CREATE TABLE SITTER (
	SITTER_NO	NUMBER	NOT NULL,
	SITTER_ACCESS	CHAR(1)	DEFAULT 'N'	NOT NULL,
	PET_PERIOD	VARCHAR2(20)		NOT NULL,
	PET_NO	VARCHAR2(20)		NOT NULL,
	LICENSE	VARCHAR2(200)		NOT NULL,
	EXPERIENCE	VARCHAR2(20)		NOT NULL,
	MOTIVE	VARCHAR2(1500)		NOT NULL,
	ADD_CONTENT	VARCHAR2(1500)		NULL,
	PROMOTION_STATUS	CHAR(1)	DEFAULT 'N'	NOT NULL,
	PROMOTION_DATE	DATE		NULL,
	STOP_REASON	VARCHAR2(20)		NULL,
	STOP_CONTENT	VARCHAR2(3000)		NULL,
	PENALTY_COUNT	NUMBER	DEFAULT 0	NOT NULL,
	SITTER_TITLE	VARCHAR2(200)		NULL,
	SITTER_CONTENT	VARCHAR2(3000)		NULL,
	ADDITIONS	VARCHAR2(200)		NULL,
	SITTER_CHECKIN	VARCHAR2(20)	DEFAULT 13	NOT NULL,
	SITTER_CHECKOUT	VARCHAR2(20)	DEFAULT 12	NOT NULL
);

COMMENT ON COLUMN SITTER.SITTER_ACCESS IS 'Y/N';

COMMENT ON COLUMN SITTER.PROMOTION_STATUS IS 'Y/N';





CREATE TABLE FAVORITE (
	MEM_NO	NUMBER		NOT NULL,
	SITTER_NO	NUMBER		NOT NULL
);

COMMENT ON COLUMN FAVORITE.MEM_NO IS 'SEQ_MNO';

COMMENT ON COLUMN FAVORITE.SITTER_NO IS 'SEQ_SNO';


CREATE TABLE REVIEW (
	RES_NO	NUMBER		NOT NULL,
	REV_STATUS	CHAR(1)	DEFAULT 'Y'	NOT NULL,
	REV_NO	NUMBER		NOT NULL,
	REV_RATING	NUMBER		NOT NULL,
	REV_CONTENT	VARCHAR2(3000)		NOT NULL,
	REV_DATE	DATE	DEFAULT SYSDATE	NOT NULL,
	REV_CO_CONTENT	VARCHAR2(3000)		NULL,
	REV_CO_TIME	DATE	DEFAULT SYSDATE	NULL
);

COMMENT ON COLUMN REVIEW.REV_STATUS IS 'N이면 신고처리되어 블라인드된 것';

CREATE TABLE ACCOUNT (
	ACC_NO	NUMBER		NOT NULL,
	SITTER_NO	NUMBER	NOT NULL,
	ACC_STATUS	CHAR(1)	DEFAULT 'Y'	NOT NULL,
	ACC_BANK	VARCHAR2(20)		NOT NULL,
	ACC_NUMBER	VARCHAR2(20)		NOT NULL,
	ACC_REPRESENT	CHAR(1)		NULL
);

COMMENT ON COLUMN ACCOUNT.ACC_STATUS IS 'Y(활성화)/N(삭제)';

COMMENT ON COLUMN ACCOUNT.ACC_REPRESENT IS 'Y/N';



CREATE TABLE LOG (
	LOG_NO	NUMBER		NOT NULL,
	RES_NO	NUMBER		NOT NULL,
	LOG_TIME	DATE	DEFAULT SYSDATE	NULL,
	LOG_CONTENT	VARCHAR2(3000)		NULL
);


CREATE TABLE ATTACHMENT (
	FILE_NO	NUMBER		NOT NULL,
	AT_CATEGORY	VARCHAR2(100)		NOT NULL,
	AT_NO	NUMBER		NOT NULL,
	ORIGIN_NAME	VARCHAR2(1000)		NOT NULL,
	CHANGE_NAME	VARCHAR2(150)		NOT NULL,
	FILE_PATH	VARCHAR2(150)		NOT NULL,
	UPLOAD_DATE	DATE	DEFAULT SYSDATE	NOT NULL,
	FILE_LEVEL	NUMBER		NULL,
	STATUS	CHAR(1)	DEFAULT 'Y'	NOT NULL
);

COMMENT ON COLUMN ATTACHMENT.FILE_NO IS 'SEQ_CNO';

COMMENT ON COLUMN ATTACHMENT.AT_CATEGORY IS '사용하는곳';

COMMENT ON COLUMN ATTACHMENT.AT_NO IS '카테고리내PK번호';

COMMENT ON COLUMN ATTACHMENT.STATUS IS '삭제/변경하면N';




CREATE TABLE NOTICE (
	NOTICE_NO	NUMBER	NOT NULL,
	NOTICE_WRITER	NUMBER		NOT NULL,
	NOTICE_CATEGORY	VARCHAR2(20)		NOT NULL,
	NOTICE_TITLE	VARCHAR2(100)		NOT NULL,
	NOTICE_CONTENT	VARCHAR2(4000)		NOT NULL,
	CREATE_DATE	DATE	DEFAULT SYSDATE	NOT NULL,
	NOTICE_STATUS	VARCHAR2(1)	DEFAULT 'Y'	NULL,
	NOTICE_COUNT	NUMBER	DEFAULT 0	NULL
);

COMMENT ON COLUMN NOTICE.NOTICE_CATEGORY IS '공지/FAQ(회원정보, 결제환불취소 등)';
COMMENT ON COLUMN NOTICE.NOTICE_STATUS IS '삭제하면 N';


CREATE TABLE ABLE_DATE (
	SITTER_NO	NUMBER	NOT NULL,
	DATE_PERIOD	DATE		NOT NULL
);

CREATE TABLE REPORT (
	REPORT_NO	NUMBER		NOT NULL,
	REPORT_SORT	NUMBER		NOT NULL,
	ORIGIN_NO	NUMBER		NOT NULL,
	REPORTED_DATE	DATE	DEFAULT SYSDATE	NOT NULL,
	DONE	VARCHAR2(1)	DEFAULT 'N'	NULL,
	MEM_NO	NUMBER		NOT NULL
);

COMMENT ON COLUMN REPORT.REPORT_SORT IS 'QNA =1or 리뷰=2';

COMMENT ON COLUMN REPORT.ORIGIN_NO IS '리뷰번호|QNA번호';


CREATE TABLE FEE (
	SITTING_NO	NUMBER		NOT NULL,
	SITTER_NO	NUMBER		NOT NULL,
	PET_SIZE	VARCHAR2(20)		NOT NULL,
	PET_CARE	VARCHAR2(20)		NOT NULL,
	FEE	NUMBER		NOT NULL,
	FEE_TIME	DATE	DEFAULT SYSDATE	NOT NULL
);

COMMENT ON COLUMN FEE.PET_SIZE IS '소형/중형/대형';

COMMENT ON COLUMN FEE.PET_CARE IS '1박/데이';


CREATE TABLE RESERV (
	RES_NO	NUMBER		NOT NULL,
	MEM_NO	NUMBER		NOT NULL,
	RES_CHECKIN	VARCHAR2(20)		NOT NULL,
	RES_CHECKOUT	VARCHAR2(20)		NOT NULL,
	RES_DATE	DATE	DEFAULT SYSDATE	NOT NULL,
	REQUEST	VARCHAR2(3000)		NULL,
	RES_STATUS	VARCHAR2(20)	DEFAULT '대기'	NOT NULL,
	CANCEL_REASON	VARCHAR2(3000)		NULL,
	PENALTY	CHAR(1)		NULL,
	PAY_NO	NUMBER		NOT NULL,
	PAY_METHOD	VARCHAR2(20)		NOT NULL,
	PAY_AMOUNT	NUMBER		NOT NULL
);
ALTER TABLE RESERV ADD CANCEL_DATE DATE;

COMMENT ON COLUMN RESERV.RES_CHECKIN IS '2021-05-20';

COMMENT ON COLUMN RESERV.RES_CHECKOUT IS '2021-05-21';

COMMENT ON COLUMN RESERV.RES_STATUS IS '대기/확정/완료/(확정 전)거절/(확정 후)취소';

COMMENT ON COLUMN RESERV.CANCEL_REASON IS '거절 또는 취소 사유';

COMMENT ON COLUMN RESERV.PENALTY IS 'Y(펫시터 귀책)/N(사용자 귀책)';



CREATE TABLE RESERV_PET (
	RES_NO	NUMBER		NOT NULL,
	PET_NO	NUMBER		NOT NULL
);


CREATE TABLE RESERV_SITTING (
	RES_NO	NUMBER		NOT NULL,
	SITTING_NO	NUMBER		NOT NULL
);

CREATE TABLE QNA (
	QNA_NO	NUMBER 	NOT NULL,
	Q_MEM_NO	NUMBER		NOT NULL,
	A_SITTER_NO	NUMBER		NULL,
	Q_SORT	NUMBER		NOT NULL,
	Q_CATEGORY	VARCHAR2(20)		NULL,
	Q_TITLE	VARCHAR2(100)		NOT NULL,
	Q_CONTENT	VARCHAR2(4000)		NOT NULL,
	Q_CREATE_DATE	DATE	DEFAULT SYSDATE	NOT NULL,
	A_CONTENT	VARCHAR2(4000)		NULL,
	A_WRITER	NUMBER		NULL,
	A_CREATE_DATE	DATE		NULL,
	QNA_STATUS	VARCHAR2(1)	DEFAULT 'Y'	NOT NULL,
	Q_SECRET	VARCHAR2(1)	DEFAULT 'Y'	NOT NULL
);

COMMENT ON COLUMN QNA.QNA_STATUS IS 'TO펫시터 문의 : 신고/삭제하면 N';


CREATE TABLE ADMIN (
	ADMIN_NO	NUMBER	NOT NULL,
	ADMIN_ID	VARCHAR2(20)		NOT NULL,
	ADMIN_PWD	VARCHAR2(16)		NOT NULL,
	ADMIN_EMAIL	VARCHAR2(30)		NOT NULL,
	ADMIN_PHONE	VARCHAR2(13)		NOT NULL,
	ADMIN_STATUS	VARCHAR2(1)	DEFAULT 'Y'	NULL
);

COMMENT ON COLUMN ADMIN.ADMIN_STATUS IS '계정 삭제하면 N';








ALTER TABLE MEMBER ADD CONSTRAINT PK_MEMBER PRIMARY KEY (
	MEM_NO
);

ALTER TABLE PET ADD CONSTRAINT PK_PET PRIMARY KEY (
	PET_NO
);

ALTER TABLE SITTER ADD CONSTRAINT PK_SITTER PRIMARY KEY (
	SITTER_NO
);

ALTER TABLE REVIEW ADD CONSTRAINT PK_REVIEW PRIMARY KEY (
	RES_NO
);

ALTER TABLE ACCOUNT ADD CONSTRAINT PK_ACCOUNT PRIMARY KEY (
	ACC_NO
);

ALTER TABLE LOG ADD CONSTRAINT PK_LOG PRIMARY KEY (
	LOG_NO
);

ALTER TABLE ATTACHMENT ADD CONSTRAINT PK_ATTACHMENT PRIMARY KEY (
	FILE_NO
);

ALTER TABLE QNA ADD CONSTRAINT PK_QNA PRIMARY KEY (
	QNA_NO
);

ALTER TABLE ADMIN ADD CONSTRAINT PK_ADMIN PRIMARY KEY (
	ADMIN_NO
);

ALTER TABLE NOTICE ADD CONSTRAINT PK_NOTICE PRIMARY KEY (
	NOTICE_NO
);

ALTER TABLE REPORT ADD CONSTRAINT PK_REPORT PRIMARY KEY (
	REPORT_NO
);

ALTER TABLE FEE ADD CONSTRAINT PK_FEE PRIMARY KEY (
	SITTING_NO
);

ALTER TABLE RESERV ADD CONSTRAINT PK_RESERV PRIMARY KEY (
	RES_NO
);

ALTER TABLE PET ADD CONSTRAINT FK_MEMBER_TO_PET_1 FOREIGN KEY (
	MEM_NO
)
REFERENCES MEMBER (
	MEM_NO
);

ALTER TABLE FAVORITE ADD CONSTRAINT FK_MEMBER_TO_FAVORITE_1 FOREIGN KEY (
	MEM_NO
)
REFERENCES MEMBER (
	MEM_NO
);

ALTER TABLE FAVORITE ADD CONSTRAINT FK_SITTER_TO_FAVORITE_1 FOREIGN KEY (
	SITTER_NO
)
REFERENCES SITTER (
	SITTER_NO
);

ALTER TABLE SITTER ADD CONSTRAINT FK_MEMBER_TO_SITTER_1 FOREIGN KEY (
	SITTER_NO
)
REFERENCES MEMBER (
	MEM_NO
);

ALTER TABLE REVIEW ADD CONSTRAINT FK_RESERV_TO_REVIEW_1 FOREIGN KEY (
	RES_NO
)
REFERENCES RESERV (
	RES_NO
);

ALTER TABLE ACCOUNT ADD CONSTRAINT FK_SITTER_TO_ACCOUNT_1 FOREIGN KEY (
	SITTER_NO
)
REFERENCES SITTER (
	SITTER_NO
);

ALTER TABLE LOG ADD CONSTRAINT FK_RESERV_TO_LOG_1 FOREIGN KEY (
	RES_NO
)
REFERENCES RESERV (
	RES_NO
);

ALTER TABLE QNA ADD CONSTRAINT FK_MEMBER_TO_QNA_1 FOREIGN KEY (
	Q_MEM_NO
)
REFERENCES MEMBER (
	MEM_NO
);

ALTER TABLE QNA ADD CONSTRAINT FK_SITTER_TO_QNA_1 FOREIGN KEY (
	A_SITTER_NO
)
REFERENCES SITTER (
	SITTER_NO
);

ALTER TABLE NOTICE ADD CONSTRAINT FK_ADMIN_TO_NOTICE_1 FOREIGN KEY (
	NOTICE_WRITER
)
REFERENCES ADMIN (
	ADMIN_NO
);

ALTER TABLE ABLE_DATE ADD CONSTRAINT FK_SITTER_TO_ABLE_DATE_1 FOREIGN KEY (
	SITTER_NO
)
REFERENCES SITTER (
	SITTER_NO
);

ALTER TABLE REPORT ADD CONSTRAINT FK_MEMBER_TO_REPORT_1 FOREIGN KEY (
	MEM_NO
)
REFERENCES MEMBER (
	MEM_NO
);

ALTER TABLE FEE ADD CONSTRAINT FK_SITTER_TO_FEE_1 FOREIGN KEY (
	SITTER_NO
)
REFERENCES SITTER (
	SITTER_NO
);

ALTER TABLE RESERV ADD CONSTRAINT FK_MEMBER_TO_RESERV_1 FOREIGN KEY (
	MEM_NO
)
REFERENCES MEMBER (
	MEM_NO
);

ALTER TABLE RESERV_PET ADD CONSTRAINT FK_RESERV_TO_RESERV_PET_1 FOREIGN KEY (
	RES_NO
)
REFERENCES RESERV (
	RES_NO
);

ALTER TABLE RESERV_PET ADD CONSTRAINT FK_PET_TO_RESERV_PET_1 FOREIGN KEY (
	PET_NO
)
REFERENCES PET (
	PET_NO
);

ALTER TABLE RESERV_SITTING ADD CONSTRAINT FK_RESERV_TO_RESERV_SITTING_1 FOREIGN KEY (
	RES_NO
)
REFERENCES RESERV (
	RES_NO
);

ALTER TABLE RESERV_SITTING ADD CONSTRAINT FK_FEE_TO_RESERV_SITTING_1 FOREIGN KEY (
	SITTING_NO
)
REFERENCES FEE (
	SITTING_NO
);


   CREATE SEQUENCE  "PETNOLJA"."SEQ_ANO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


   CREATE SEQUENCE  "PETNOLJA"."SEQ_CNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


   CREATE SEQUENCE  "PETNOLJA"."SEQ_MNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


   CREATE SEQUENCE  "PETNOLJA"."SEQ_NNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


   CREATE SEQUENCE  "PETNOLJA"."SEQ_PNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


   CREATE SEQUENCE  "PETNOLJA"."SEQ_QNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


   CREATE SEQUENCE  "PETNOLJA"."SEQ_RPNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;

CREATE SEQUENCE  "PETNOLJA"."SEQ_REVNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;

CREATE SEQUENCE  "PETNOLJA"."SEQ_RESNO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;



  CREATE OR REPLACE FORCE VIEW "PETNOLJA"."VW_SITTER" ("MEM_NO", "MEM_ID", "MEM_NAME", "MEM_ADDRESS", "MEM_LATITUDE", "MEM_LONGTITUDE", "PET_PERIOD", "LICENSE", "EXPERIENCE", "ADD_CONTENT", "PENALTY_COUNT", "SITTER_TITLE", "SITTER_CONTENT", "ADDITIONS", "DSMALL", "DMID", "DBIG", "OSMALL", "OMID", "OBIG", "AVGRATING", "SITTER_CHECKIN", "SITTER_CHECKOUT", "MEM_REPORT") AS 
  select DISTINCT
         MEM_NO
        ,MEM_ID
        ,MEM_NAME
        ,MEM_ADDRESS
        ,MEM_LATITUDE
        ,MEM_LONGTITUDE
        ,PET_PERIOD
        ,LICENSE
        ,EXPERIENCE
        ,ADD_CONTENT
        ,PENALTY_COUNT
        ,SITTER_TITLE
        ,SITTER_CONTENT
        ,ADDITIONS
        ,DSMALL
        ,DMID
        ,DBIG
        ,OSMALL
        ,OMID
        ,OBIG
        ,ROUND(AVGRATING) AVGRATING
        ,SITTER_CHECKIN
        ,SITTER_CHECKOUT
        ,MEM_BLOCK
        MEM_REPORT
from member
join sitter on(mem_no = sitter_no)
-- 펫시터의 하루, 당일 케어비용 열로 정렬 변경 (D로시작 당일, O으로시작 일박)
JOIN(SELECT *
        FROM(SELECT SITTER_NO, PET_SIZE, FEE
            FROM FEE WHERE PET_CARE='데이')
        PIVOT (SUM(FEE)
            FOR PET_SIZE IN('소형' DSMALL,'중형' DMID,'대형' DBIG)))USING(SITTER_NO)
JOIN(SELECT *
        FROM(SELECT SITTER_NO, PET_SIZE, FEE
            FROM FEE WHERE PET_CARE='1박')
        PIVOT (SUM(FEE)
            FOR PET_SIZE IN('소형' OSMALL,'중형' OMID,'대형' OBIG)))USING(SITTER_NO)
-- 펫시터의 하루, 당일 케어비용 열로 정렬 변경 끝
-- 펫시터의 평균평점 확인
FULL JOIN(SELECT SITTER_NO, AVG(REV_RATING) AVGRATING 
            FROM REVIEW
            JOIN RESERV_SITTING USING(RES_NO)
            JOIN FEE USING(SITTING_NO)
            GROUP BY SITTER_NO, REV_STATUS HAVING REV_STATUS='Y') USING (SITTER_NO)
-- 펫시터의 평균평점 확인 끝
where MEM_STATUS ='Y'
and promotion_status='Y'
AND STOP_REASON IS NULL;



-- 정산 관련, 뷰 생성.
CREATE OR REPLACE VIEW VW_CAL
AS(SELECT NVL(A.SID, B.SID) "SITTER_ID", NVL(A.SNAME, B.SNAME) "SITTER_NAME", NVL(A.CALMON, B.CALMON) "MONTH", NVL(A.CALYEAR, B.CALYEAR) "YEAR", NVL(NVL((A.CONF + B.CANC), A.CONF), B.CANC) "TOTAL"
FROM (SELECT MEM_ID SID, MEM_NAME SNAME, SUM(PAY_AMOUNT)*0.9 "CONF", EXTRACT(YEAR FROM TO_DATE(RES_CHECKOUT,'YYYY-MM-dd')) "CALYEAR"
        , EXTRACT(MONTH FROM TO_DATE(RES_CHECKOUT,'YYYY-MM-dd')) "CALMON"
FROM RESERV
JOIN RESERV_SITTING USING (RES_NO)
JOIN FEE F USING(SITTING_NO)
JOIN MEMBER M ON(F.SITTER_NO = M.MEM_NO)
WHERE RES_STATUS = '확정'
  AND EXTRACT(MONTH FROM TO_DATE(RES_CHECKOUT, 'YYYY-MM-dd')) < EXTRACT(MONTH FROM SYSDATE)
  AND EXTRACT(YEAR FROM TO_DATE(RES_CHECKOUT, 'YYYY-MM-dd')) <= EXTRACT(YEAR FROM SYSDATE)
GROUP BY MEM_ID, MEM_NAME, EXTRACT(MONTH FROM TO_DATE(RES_CHECKOUT,'YYYY-MM-dd')), EXTRACT(YEAR FROM TO_DATE(RES_CHECKOUT,'YYYY-MM-dd'))) "A" -- 확정
FULL JOIN (SELECT SID, SNAME, CALMON, CALYEAR
      , SUM(CASE WHEN D > 14 THEN M * 0
            WHEN D > 7 THEN M * 0.05 
            WHEN D > 3 THEN M * 0.25
            ELSE M * 0.9
       END) "CANC"
        FROM (SELECT 
                  MEM_ID SID
                , MEM_NAME SNAME   
                , EXTRACT(MONTH FROM CANCEL_DATE) CALMON
                , EXTRACT(YEAR FROM CANCEL_DATE) CALYEAR
                , ROUND((TO_DATE(RES_CHECKIN, 'YYYY-MM-dd') - SYSDATE),0) D
                , PAY_AMOUNT M
               FROM RESERV
               JOIN RESERV_SITTING USING (RES_NO)
               JOIN FEE F USING(SITTING_NO)
               JOIN MEMBER M ON(F.SITTER_NO = M.MEM_NO)
               WHERE RES_STATUS = '취소' AND PENALTY = 'N'
               )
        GROUP BY SID, SNAME, CALMON, CALYEAR) "B" 
ON (A.SID = B.SID AND A.SNAME = B.SNAME AND A.CALMON = B.CALMON AND A.CALYEAR = B.CALYEAR));


   CREATE OR REPLACE FORCE VIEW "PETNOLJA"."VW_OPENDATE" ("SITTER_NO", "ABLE_DATE") AS 
  SELECT SITTER_NO,LISTAGG(TO_CHAR(DATE_PERIOD, 'YYYY-MM-DD'),',') WITHIN GROUP(ORDER BY date_period) AS ABLE_DATE
    FROM ABLE_DATE
    GROUP BY SITTER_NO;

create or replace FUNCTION GET_DISTANCE (
  LAT1 FLOAT, 
  LNG1 FLOAT,
  LAT2 FLOAT,
  LNG2 FLOAT 
)

  RETURN FLOAT
 
IS

  fEARTH_R FLOAT := 6371000.0;
  fPIE FLOAT := 3.141592653589793;
  fRAD FLOAT := 0.0;
  radLAT1 FLOAT := 0.0;
  radLAT2 FLOAT := 0.0;
  radDIST FLOAT := 0.0;
  fDIST FLOAT := 0.0;

BEGIN

  fRAD := fPIE / 180;
  radLAT1 := fRAD * LAT1;
  radLAT2 := fRAD * LAT2;
  radDIST := fRAD * ( LNG1 - LNG2 );
  fDIST := SIN( radLAT1 ) * SIN( radLAT2 );
  fDIST := fDIST + COS( radLAT1 ) * COS( radLAT2 ) * COS( radDIST );
  RETURN ((fEARTH_R * ACOS( fDIST ))/1000);

END;


